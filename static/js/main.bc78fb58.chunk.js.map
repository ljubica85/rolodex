{"version":3,"sources":["components/card/Card.js","components/card-list/Card-list.js","components/search-box/Search-box.js","components/choice/Choice.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","entity","name","email","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","Choice","handleClick","onClick","size","App","e","setState","searchField","target","value","title","state","fetch","then","response","json","users","this","filteredMonsers","filter","toLowerCase","includes","toLocaleLowerCase","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wWAGaA,G,kBAAO,SAAAC,GAAK,OACvB,yBAAKC,UAAU,kBACb,yBACEC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,mBAAqDL,EAAMM,OAA3D,mBAEL,4BAAKN,EAAMI,QAAQG,MACnB,2BAAIP,EAAMI,QAAQI,UCNTC,EAAW,SAAAT,GAAK,OAC3B,yBAAKC,UAAU,aACZD,EAAMU,SAASC,KAAI,SAAAP,GAAO,OACzB,kBAAC,EAAD,CAAMQ,IAAKR,EAAQC,GAAID,QAASA,EAASE,OAAQN,EAAMM,cCJhDO,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACvB,2BACEC,KAAK,SACLf,UAAU,SACVa,YAAaA,EACbG,SAAUF,M,OCCDG,G,MAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAH,OACpB,yBAAKlB,UAAU,QACb,4BAAQA,UAAU,gBAAgBmB,QAAS,kBAAMD,EAAY,KAC3D,kBAAC,IAAD,CAAgBE,KAAM,MAExB,4BAAQpB,UAAU,gBAAgBmB,QAAS,kBAAMD,EAAY,KAC3D,kBAAC,IAAD,CAAkBE,KAAM,MAE1B,4BAAQpB,UAAU,gBAAgBmB,QAAS,kBAAMD,EAAY,KAC3D,kBAAC,IAAD,CAAiBE,KAAM,MAEzB,4BAAQpB,UAAU,gBAAgBmB,QAAS,kBAAMD,EAAY,KAC3D,kBAAC,IAAD,CAAYE,KAAM,SC4BTC,E,YA1Cb,aAAe,IAAD,8BACZ,+CAcFP,aAAe,SAAAQ,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAhB1B,EAkBdR,YAAc,SAAAI,GACZ,IACMK,EADS,CAAC,OAAQ,UAAW,YAAa,SAC3BL,EAAE,GACvB,EAAKC,SAAS,CAAElB,OAAQiB,EAAIK,MAAMA,KAlBlC,EAAKC,MAAQ,CACXnB,SAAU,GACVe,YAAa,GACbnB,OAAO,EACPsB,MAAM,YAPI,E,iFAUO,IAAD,OAClBE,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAAEd,SAAUwB,S,+BAWnC,IAAD,EACmCC,KAAKN,MAAvCnB,EADD,EACCA,SAAUe,EADX,EACWA,YAAanB,EADxB,EACwBA,OACzB8B,EAAkB1B,EAAS2B,QAAO,SAAAjC,GAAO,OAC7CA,EAAQG,KAAK+B,cAAcC,SAASd,EAAYe,wBAElD,OACE,yBAAKvC,UAAU,OACb,4BAAKkC,KAAKN,MAAMD,MAAhB,aACA,kBAAC,EAAD,CACEd,YAAY,kBACZC,aAAcoB,KAAKpB,eACnB,kBAAC,EAAD,CAAQI,YAAagB,KAAKhB,cAC5B,kBAAC,EAAD,CAAUT,SAAU0B,EAAiB9B,OAAQA,S,GArCnCmC,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,kB","file":"static/js/main.bc78fb58.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./card.css\";\n\nexport const Card = props => (\n  <div className=\"card-container\">\n    <img\n      alt=\"monster\"\n      src={`https://robohash.org/${props.monster.id}?set=set${props.entity}&size=180x180`}\n    />\n    <h2>{props.monster.name}</h2>\n    <p>{props.monster.email}</p>\n  </div>\n);\n","import React from \"react\";\nimport \"./card-list.css\";\nimport { Card } from \"../card/Card\";\n\nexport const CardList = props => (\n  <div className=\"card-list\">\n    {props.monsters.map(monster => (\n      <Card key={monster.id} monster={monster} entity={props.entity} />\n    ))}\n  </div>\n);\n","import React from \"react\";\nimport \"./search-box.css\";\n\nexport const SearchBox = ({placeholder, handleChange}) => (\n  <input\n    type=\"search\"\n    className=\"search\"\n    placeholder={placeholder}\n    onChange={handleChange}\n  />\n);\n\n","import React from \"react\";\nimport {\n  GiVintageRobot,\n  GiVampireDracula,\n  GiRobotAntennas,\n  GiWhiteCat\n} from \"react-icons/gi\";\nimport \"./choice.css\";\n\nexport const Choice = ({ handleClick }) => (\n  <div className=\"flex\">\n    <button className=\"choice-button\" onClick={() => handleClick(1)}>\n      <GiVintageRobot size={50} />\n    </button>\n    <button className=\"choice-button\" onClick={() => handleClick(2)}>\n      <GiVampireDracula size={50} />\n    </button>\n    <button className=\"choice-button\" onClick={() => handleClick(3)}>\n      <GiRobotAntennas size={50} />\n    </button>\n    <button className=\"choice-button\" onClick={() => handleClick(4)}>\n      <GiWhiteCat size={50} />\n    </button>\n  </div>\n);\n","import React from \"react\";\nimport \"./App.css\";\nimport { CardList } from \"./components/card-list/Card-list\";\nimport { SearchBox } from \"./components/search-box/Search-box\";\nimport { Choice } from \"./components/choice/Choice\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n      entity:2,\n      title:'Monsters'\n    };\n  }\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(users => this.setState({ monsters: users }));\n  }\n  handleChange = e => {\n    this.setState({ searchField: e.target.value });\n  };\n  handleClick = e => {\n    const choice = ['Robo', 'Monster', 'Robo-head', 'Kitty']\n    const title = choice[e-1];\n    this.setState({ entity: e , title:title});\n  };\n\n  render() {\n    const { monsters, searchField, entity } = this.state;\n    const filteredMonsers = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLocaleLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1>{this.state.title} Roloodex</h1>\n        <SearchBox\n          placeholder=\"Search Monsters\"\n          handleChange={this.handleChange}\n        /><Choice handleClick={this.handleClick} />\n        <CardList monsters={filteredMonsers} entity={entity} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}